开发者笔记

开发笔记 第01天
1. Vue.js是当前最火的MVVM框架
    （1）轻量
    （2）简洁
    （3）高效
    （4）数据驱动
    （5）组件化

2. 项目简介
    （1）需求分析
    （2）脚手架工具
    （3）数据mock
    （4）架构设计
    （5）代码编写
    （6）自测
    （7）编译打包

3. 线上生产环境标准
    （1）代码开发测试环节： 以像素级完美还原UI设计图 UI标注、项目真实数据做演示 以保证代码无兼容性问题
    （2） 代码规范： 架构设计、组件抽象、模块拆分、代码风格统一、JS变量命名规范、CSS代码规范 致力于编写
    高可维护，易于扩展，通用性强的代码，完全按照一线互联网公司的真实开发项目标准开发

4. 功能技术分析
    （1）vue-resource和后端做数据交互
    （2）vue-router做前端路由，实现单页应用
    （3）第三方JS库better-scroll，列表滚动的实现是利用了自己开发的第三方JS库better-scroll
    （4）最大程度的组件化，页面上很多样式和功能相似的区块，方便在项目中复用
    （5）商家页面中的收藏商家功能，利用html5的localstorage接口存储在浏览器端
    （6）图标字体的使用
    （7）移动端1像素边框
    （8）css sticky footer布局
    （9）flex弹性布局

5. 前置知识
    HTML、CSS、JavaScript、ES6、Vue.js

开发笔记 第02天
1. 目标
    （1）掌握Vue.js在实战中的运用
    （2）学会使用Vue.js完整地开发移动端App
    （3）学会组件化、模块化的开发方式

2. 内容
    （1）Vue.js框架介绍
    （2）Vue-cli架手架 搭建基本代码框架
    （3）vue-router 官方插件管理路由
    （4）vue-resource Ajax通信
    （5）Webpack 构建工具
    （6）es6+eslint eslint:es6代码风格检查工具
    （7）工程化、组件化和模块化
    （8）移动端常用的开发技巧
            flex弹性布局、css sticky footer布局、酷炫的交互设计

开发笔记 第03天
1. 近年来前端发展趋势
    旧浏览器逐渐淘汰，移动端需求增加
        IE5-IE8 不支持ES5特性
        IE9+、chrome、Safari、Firefox支持ES5特性
        移动端基本基于webkit内核，全面支持ES5特性
    前端交互越来越多，功能越来越复杂
        前端包罗万象
        高大上的技术库和框架
        酷炫的运营活动页面
        H5小游戏
        新闻趣味站
        在线购物平台
        社交网络
        金融信贷应用
        音乐互动社区
        视频分享平台
        打车出行平台
    架构从传统后台MVC向REST API + 前端MV*迁移
        MV*包括：MVC、MVP、MVVM

2. MVVM框架基本概念
    View(视图 DOM) -- ViewModel(视图模型 连接DOM和JavaScript对象的中间件) -- Model(数据 JavaScript对象)
    说明：ViewModel就是连接视图和数据的中间件，在MVVM的架构下，视图和数据是不能直接通讯的，它通常是通过ViewModel这个
    中间件来进行通讯，ViewModel通常要实现一个Observer观察者，当数据发生变化，ViewModel能够观察到数据的这种变化，
    然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上
    就实现了数据的双向绑定。

3. MVVM框架的应用场景
    （1）针对具有复杂交互逻辑的前端应用
    （2）提供基础的架构抽象
    （3）通过Ajax数据持久化，保证前端用户体验
    （4）MVVM框架：angular、react、vue

开发笔记 第04天
1. 什么是Vuejs及Vuejs生态？
    （1）它是一个轻量级的MVVM框架
    （2）数据驱动 + 组件化的前端开发
    （3）GitHub超过25k+的star数，社区完善

2. 什么是社区？
    GitHub、论坛、聊天室、Twitter

3. 对比Angular、React
    （1）Vue.js更轻量，gzip后大小只有20k+
    （2）Vue.js更易上手，学习曲线平稳
    （3）吸取两家之长，借鉴了angular的指令和react的组件化

4. Vuejs核心思想
    （1）数据驱动
        * DOM是数据的一种自然映射
        思考：
            如果没有MVVM框架，数据和视图是如何交互的呢？比如我们通过ajax从后端获取数据，为了让视图改变，我们会手动
         触发DOM的改变，再比如我们通过前端交互改变一些数据，为了让视图也发生变化，仍然需要手动触发这些DOM改变，手动
         改变DOM不仅是一个繁琐的过程，还非常容易出错，而我们使用了Vue.js后，就省去了手动操作DOM改变的步骤了，在Vue.js
         里你只需要改变数据，Vue.js通过Directive指令去对DOM做了一层封装，当数据发生变化，会通知指令去修改对应的DOM，
         数据驱动DOM变化，DOM是数据的一种自然映射。Vue.js还会对操作做一些监听，当我们修改视图的时候，Vue.js监听到这些
         变化，从而改变数据，这样就形成了数据的双向绑定。

        * 数据响应原理：
            数据改变是驱动视图自动更新
                我们有一份数据a.b，在一个vue对象实例化的过程中，会给a.b这份数据通过ES5的Object.defineProperty给属性添
            加了一个getter和setter，同时vue.js会对模板做编译，解析生成一个指令对象，这里就是一个v-text指令，每个指令对象
            都会关联一个watcher，当我们对指令对应的表达式a.b做求值的时候，就会触发它的getter，这里就会把依赖收集到
            watcher里面，当我们再次改变a.b的值的时候，我们就会触发它的setter，会通知到对应关联的watcher，然后watcher
            就会再次对关联的a.b求值，计算对比新旧值，当发现值改变了，watcher又会通知到指令，调用指令的update方法，由于
            指令是对DOM的封装，所以它就会调用原生DOM的方法去更新视图，这样我们就完成了一个数据改变到视图自动更新的过程。

    （2）组件化
            * 目的：扩展HTML元素，封装可重用性的代码
            * 组件设计原则
                >> 页面上每个独立的可视/可交互区域视为一个组件；
                >> 每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护；
                >> 页面不过是组件的容器，组件可以嵌套自由组合形成完整的页面；

开发笔记 第05天
1. Vue-cli安装
    * Vue-cli是vue的脚手架工具
    * 脚手架就是帮助我们写好基础代码的工具
    * Vue-cli脚手架能帮助我们完成下面几项工作：目录结构、本地调试、代码部署、热加载、单元测试等
    * github地址：https://github.com/vuejs/vue-cli
    * 检查nodejs版本 必须在v4.*.*以上
    * 安装vue-cli，全局安装执行命令 npm install -g vue-cli
    * 检查安装成功 执行命令 vue 或 vue list

2. 项目文件介绍
    * 基于webpack模板新建项目：vue init webpack sell-app
        >> Project name 选择默认即可
        >> Project description 选择默认即可
        >> Author 选择默认回车即可
        >> Use ESLint to lint your code? 选择Y
        >> Standard (https://github.com/feross/standard)
           AirBNB (https://github.com/airbnb/javascript)
           none (configure it yourself) 选择标准即可
        >> Setup unit tests with Karma + Mocha? (Y/n) 选择n
        >> Setup e2e tests with Nightwatch? (Y/n) 选择n
    * 安装项目依赖然后运行项目
        cd sell-app
        npm install
        npm run dev




